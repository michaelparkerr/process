이전 진도(09시~12시, 13시~15시)(5시간어치)

html 요청 쿼리

시작줄 ->방식(method)

Accept:~~~
Referer:~~일때 (여기가 요청 발생 위치)

회원가입 과정등 순차적 처리가 필요할 때
이걸 위조하는 공격 기법이 CSRF(Cross Site Request F??)(크로스 사이트 요청 위조) 기법이다.
방어하기 위해 정상절차 확인이 필요한데, Referer, Header를 확인해야한다.
stateless한 http 구조서 요청과 요청간 관계를 설정하므로 
Cookie:role = ;~~~은 서버가 만들어서 내려준다

1번 요청과 2번 요청이 같은 놈이구나 서버가 알게끔 처리해야한다

보안상 문제가 발생할 여지는 로컬에서 서버로 요청하는 경우이다.

GET/ POST DELETE PUT OPTION HEAD(응답헤더만 요청한다.)

POST에서 동적인 요청을 하는데 서버에 전달되는 값을 본문에 넣는다.
여기서 휘발성 데이터(예를 들어 회원가입시) 한번 꺼내 쓰면 재사용 불가하다.
서버에서 전달되는 값을 본문에 넣기 때문에 본문이 필요하고 본문의 길이를 알기 위해 Content Length Content Type이라는 파라미터가 필요하다.

ex)multipart/Formdata,
응답 헤더에 바운더리(Clear type 영역)가 생성된다

원래는 type에 인코딩 방식이 표기되지만 왜 바운더리 표시를 하는가?
클라이언트에서 서버로 전송하는 데이터가 가변적(다양한 자료형)일 때 바운더리 표시한다.(파일 입출력시)



GET에서 서버에 전달되는 값을 주소에서 전달하는데 이것으로 인해 정보가 노출될 우려가 있고, 고정된 자원을 전달할 때 사용한다.(정적인 요청)
그리고 본문이 필요없다.(주소에서 전달하므로)


서비스 거부 공격 DOS(Deny of Service)
(슬로우리스 어택) : http의 특징을 이용한 공격이다. (DOS의 한 유형)

http 특징 시작줄(줄바꿈),헤더(줄바꿈),본문(줄바꿈)이다. (줄바꿈:개행, 헤더등의 끝을 알리는 문자로 개행 필수이다)

만약 개행문자가 없으면 헤더등 안끝난줄알고 서버가 계속 기다린다.

서버(http의 구조)의 기능은 응답이다(서버가 브라우져에 보낸다.)
시작은 HTTP/1.2 (개행)
헤더는 Set-Cookie(서버가 만들어서 내려준다.) (개행)

...
..
...

(개행) 요청응답 구조상 슬로우리스 어택은 의미없다.
본문은 브라우저를 통해 사용자에게 보여지는 영역이다.


보안상 공격은 어떻게 하는가? Set-cookie:role=(내용) 여기서 내용부분을 변조한다.

ex) set-cookie:role abc(개행) ~~(헤더끝인식) (개행)][(개행)<-이부분을 변조 ~~~[개행] 중간 부분을 변조하여 이용자에게 본문 이외의 다른 내용이 보이도록 함.
<script>~~~ (피싱)

HTTP 응답 분할
실행코드를 쿠키에 실어 보낸다.

여기서 번호대역은 100(정보) 200(성공) 300(리다이렉트) 400(실패)(클라이언트 오류) 500(서버사이드오류(Internal Error))




15시 ~ 16시

Data와 Data의 관계를 정리해놓은 것이 RDB이다.

모든 data는 테이블로 저장됨.

openeg\root@localhost\board_member를 눌러보면 멤버들의 정보 값이 테이블로 정리되어있다.

data가 일정한 규모와 형태가 있을 때는 테이블형태로 넣어서 join을 걸어서 여러가지 형태로 만들 수 있었다.

입출입 데이터가 끊임없이 쌓임. (비정형화된 데이터들이 쌓임)

비정형화된 데이터를 구분하기는 힘들지만, 원하는 데이터를 찾고자하는 수요나 욕망이 있음.

NoSQL을 통해서 그 수요를 충족시킬 수 있음.

정형성, 무결성이 중요하지 않은 엄청나게 많은 데이터들 가운데서 원하는 데이터를 찾는 것이 가능.

요즘 이런 문제를 해결하기 위해 NoSQL 사용 중임.

HTML은 Hyper text mark of language. 이 반대는 Markdown.

HTML은 기계가 받아들이는 언어. Markdown은 사람들이 이용하기 위한 언어.

data를 extensive하게 이용할 수 있게해주기 위해 xml이 사용됨.ML은 mark of language.(데이터 좌우에 꺾쇠를 넣어 표현하는 것)
사람이 하기에는 굉장히 짜증나고 피곤한 작업임.

사람이 하기에는 부적합하므로 효율적으로 할 필요가 있음.
제목을 나타내기 위해 <h1>내용</h1> 9글자를 써야함.

그래서 # 이면 큰 제목 ##이면 작은 제목과 같이 기호를 통해 쉽게 나타냄.

RDB와 NoSQL의 의미를 정리.

존재하는 데이터를 가공할 때 데이터 베이스를 읽어서 뿌려주는 것을 해보자.

DB는 일반 명사.안에 고유명사가 들어감 MSSQL, 오라클DB,MySQL등등.

처리하기 위해서는 개발자가 공부만하기에는 피곤하므로 추상계층을 만들어서 그 추상계층에서는 Interface만 제공한다.

Interface에 맞는 DB를 계속 만들어준다. 이 역할을 수행하는 추상계층을 Driver라고 한다.

개발할 때는 추상계층과 실제 구현계층 둘로 나뉜다.

추상계층에서 어떤 DBMS의 종류를 사용할지를 결정해줘야한다.

1)Driver Loading(구현체를 정의)
2)Connection (DB에 연결됨. Connection URI또는 URL이 필요함, 어디에 있고 어떤 포트를 사용하고 어떤 계정인지)
3)Statement(구문) SQL문으로 DB쪽으로 명령어를 보냄. 동작시키면 결과가 나옴.
4)ResultSet(결과) 결과를 받아옴(화면에 보여줄 내용들)
5)Close() 사용한 객체들을 전부 닫아줌. 사용하던 자원을 다른 사람이 쓸 수 있도록 닫아줌.

내가 만든 페이지마다 모두 이 방법을 따라가기에는 번거롭기 때문에 따로 빼서 FrameWork에게 위임시킴.(아이바티스 마이바티스 하이버네이트)
FrameWork ORM

dbtest.jsp에서
<%
	Class.forName("com.mysql.jdbc.Driver")
%>
를 body에 삽입.
mysql에서 제공하는 java쪽에서 제공하는 jdbc(java data base connector) driver를 사용함.
jdbc 말고 odbc(object data base connector)도 존재.
	DriverManager.getConnection("","","");
첫번째는 Connection URL이 들어감. jdbc:mysql://127.0.0.1:3306/openeg
연결할 대상을 정의.

openeg를 더블클릭하면 연결됨.여기서 우클릭 후 Properties 를 들어가보면 Connection URL이 써있음.
JDBC Driver를 누르면 ClassforName에 사용할 Driver Class Name 인 com.mysql.jdbc.Driver가 써있음.

Quantum DB도 내부를 열어보면 JavaEE에서 짜고있는 코드와 유사한 과정을 밟는다는 의미

board_member를 한개가 아니기 때문에 여러값이 묶여서 날아올 수 있음.

구문하나하나보다 어떻게 처리되는지를 주목

dbtest.jsp를 결론적으로 아래와 같이 정의

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
<%@ page import="java.text.SimpleDateFormat" %>
<%@ page import="java.util.Date" %>
<%@ page import="java.sql.*" %>  //구문 선언해줘야함.
<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Insert title here</title>
</head>
<body> 
<%
	// #1. 드라이버 로드
	Class.forName("com.mysql.jdbc.Driver");

	// #2. 연결
	Connection conn = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/openeg","root","apmsetup"); // id는 root, 비밀번호는 apmsetup이다.
	// #3. Statement 객체 생성
	Statement stmt = conn.createStatement();
	
	// #4. 실행할 SQL 문을 작성
	String sql = "select userid from board_member";
	
	// #5. Statement 객체를 통해서 SQL문을 실행
	ResultSet rs = stmt.executeQuery(sql);
	
	// #6. 출력
	while (rs.next()) {
		String userid = rs.getString("userid"); // String userid로 userid 정의해줘야함.
		out.println(userid);
	}
	
%>
</body>
</html>
	

16시~17시

db에서 데이터 베이스를 받아오는 것이 안되는 경우

(1)

ctrl+alt+del -> 작업관리자에서 프로세스 탭으로 가서 mysqld.exe 가 켜져있어야함.

start_securecoding.bat를 실행하면 mysql+eclipse가 같이 켜짐. eclipse만 켜면 mysql이 같이 안켜져서 문제가 생길 수 있음.
두개가 켜졌을 때 eclipse만 종료했다가 다시 구동하면 이전에 켜진 mysqld와 eclipse가 연동되지 않으므로 작업관리자에서 mysqld를 종료 후 다시 켜준다.
 
(2)

jdbc:mysql://127.0.0.1:3306/openeg를 잘못쳤을 경우.

제대로 칠 자신이 없으면 properties에 가서 connection URL을 정확히 확인.



동일한 형식의 반복되는 자료를 처리하는 것을 리터레이트형이라고 한다.(node하다보면 엄청 많이 나온다.)

아까 만든 input.html에서 어떤 번호를 입력하면 idx column에 일치하는 user id를 가져오는 방식을 구현한다.(검색)




파일이름을 대문자로 만들어놓으면 구분해서 다르게 해석된다.

호스트 파일위치는 C:\Windows\System32\drivers\etc에 있다.

여기서 

# localhost name resolution is handled within DNS itself.
#	127.0.0.1       localhost
#	::1             localhost

70.12.50.53 		hjw
70.12.50.55			hjw1

와 같이 아랫단을 추가하면 같은 네트워크 사람의 파일에 정해놓은 닉네임으로 접근할 수 있다.

호스트파일을 왠만하면 건드리지 말라는 것은 ip주소 www.naver.com 형식으로 적었을 때 피싱되어 다른 페이지로 연결될 가능성이 있다.
(브라우저에서 자체적으로 차단하기도 함)

피싱 : 사용자를 속여서 사용자 정보를 빼온다.

호스트파일을 고쳐서 우리은행을 검색했을 때 우리들은행으로 연결되게 하는 식.
호스트파일 변조를 통한 피싱이 성행(은행 사이트에 접속하면 host파일 변경을 탐지함)

영문자,숫자,특수문자 8자이상
위의 3가지중 2가지로 10자 이상

확률때문에 (10+26*2+13)^8 가 됨.

긴 비밀번호는 외우기 힘들어서 사용하기 힘들다. 그래서 시스템이 8글자에 40글자를 보충해준다.(보충해주는 것이 salt이다.)

salt는 해시가 깨지는 것을 막기 위해 시스템이 부여해주는 임의의 값이다.

개인정보보호법과 정보통신보호법에 패스워드에 해쉬함수를 이용해야한다고 명시되어있다. 
해시함수는 일방향성을 갖고있기 때문에(단방향성)
해시는 임의의 크기의 입력을 받아서 고정 크기의 유일한 출력을 만들어내는 것이다.(message digest한다고 한다)
예전에 MD2 MD5가 사용되었었다.

a!=b 이면 -> H(a) != (b)이다. (이것이 유일하다는 의미)
a->H(a)를 뽑을 수는 있지만, H(a)->a를 할수는 없다.

좋은 해시 알고리즘의 조건
1. 빠른 연산을 제공해야한다.(why? 입력값의 크기가 정해져있지 않기 때문에 짧으면 빠르고 길면 느리면 사용하기 힘들어진다.)
2. 앞에서 나온 유일하다는 것과 해시의 정의 사이에서는 모순이 발생한다.(출력은 한정되어있고 입력은 무한하기 때문에 우연히 겹칠 수 있는데 이것을 피해야한다. 이것을 충돌회피라 한다.)

유일하다는 특징을 이용하여 무결성 검사를 할 수 있다. 상태가 그대로 유지되었다는 것을 증명.
data가 존재할 때 network를 통해 data가 전달되어 data'가 되었다. 이 data'가 원본과 동일하다는 것을 어떻게 증명할 것인가?
H(data)를 같이 보내면 data'의 H(data)와 H(data')를 비교하여 다르면 위조되었다고 판단한다.

단방향성이므로 인증정보 저장 및 인증 처리에 사용한다.


일반적인 암호화 알고리즘은 암호화도 할 수 있고 복호화도 할 수 있다.
P->A->E
E로 P를 유추할 수 없게 만드는 것이 핵심.
여기서 A에 키라는 개념이 들어감.
동일한 알고리즘에 키라는 개념이 적용됨으로써 동일한 평문에서도 다른 것이 나올 수 있도록 해줌.
Key만 가지고 있으면 누구나 암호문을 만들 수 있고, 암호문으로 평문을 만들 수 있다.
이러한 암호화 복호화가 가능한 것을 양 방향성암호화 시스템이라고 한다.

양방향에서 key만 노출되지 않으면 E(PW)가 노출되어도 안전. 하지만 관리자는 E(pw)로 key를 이용하여 원래 비밀번호를 알 수 있다.

해시값을 가지고 원문을 알아내는 것을 해쉬 크래킹이라고 한다.
이것은 3가지로 나뉜다.
1)사전대입 공격
2)무작위대입 공격(Brutal force attack)(될때까지)
3)Rainbow Table 공격


내가 가진 해쉬값이 있을 때 내가 아는 패스워드를 해시값으로 바꾸었을 때 동일한 값이 나오면 패스워드가 일치하는 것을 알 수 있다.
여기서 일치하는 것 중 가장 많이 사용하는 패스워드를 먼저 대입한다.(자판의 배열수 또는 의미를 가진 단어들)

미리 들어갈 수 있는 원문과 해쉬를 미리 만들어두고 비교하여 찾는다.(무작위 공격을 해야 table이 만들어지므로 무작위 공격이 선행되어야함.)

1을 막는 방법은 단순한 문자열을 사용하는 것을 피하는 것이고
2,3을 막는 방법은 다양한 문자를 사용하고 길이를 증가시킴으로써 공격 비용을 증가시켜 공격 의지를 상쇄시킨다.

즉, salt는 해시크래킹을 막기위한 수단이다.(시스템이 부여하는 임의의 입력값)

H(P) 평문이 있으면 해시를 뽑고 거기서 해시를 뽑고 또 뽑는다.
H(H(H(H...(P))))) 방어기법

Burp Suite는 proxy 

Client와 Server가 있을 때 Client쪽에서 요청했을 때 Server로 요청이 바로 가야하고 Server에서 응답도 바로 와야한다.
하지만, 요청 응답 비용이 지나치게 비싸고 느리기 때문에 해당서버로 왔다갔다할 때 사람들이 이용하는 정적 페이지가 다 똑같기 때문에 
임의의 요청을 대행하는 '단'을 만든다. 요청과 응답을 대리 수행하는 역할. 이것이 proxy.
이것을 사용함으로써 효과는 캐싱 기능이 있고, 내가 동일한 페이지로 엑세스할 때 멀리 나가지 않고 proxy에서 바로 응답해주기 때문에
회선 사용 비용 절감, 모니터링 가능, 빠른 속도를 보장한다.

최근에는 내 pc안에 별도의 서버를 구축하지 않고 proxy를 구동할 수 있다. 이것을 local proxy라고 한다.
이 기능을 제공하는 것이 burp suite,temper와 같은 것들이다.

이것을 설치하는 이유는 이것을 설치하여 proxy에 쌓이는 데이터를 볼 수 있기 때문이다.
또 모니터링할 수 있다. 분석이 끝나면 조작할 수 있다. Server는 이 바뀐 데이터를 수용하게 된다.
