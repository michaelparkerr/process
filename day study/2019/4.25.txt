9시~10시

자기 PR시대
개발자는 본업과 더불어 오픈소스 개발참여라던지 다양한 부업을 시작해라
링크드인에 자신에 대한 것을 공개해서 내가 뭘 할 수 있는지 알리기.
블로그 등에 기술적인 학습 내용을 글쓰기.

한빛 real time series(바뀌는 내용에 적응하기 위해 소량 또는 ebook, pdf로 얇은 책을 발행하는 것이 유행)

db를 받아오고 처리할때
server에서 하는 것인지 client에서 하는것인지 구분하는 것이 어려울 수 있기 때문에
개발자 도구를 활용하여 구분하도록 하자. 감을 익힐 필요가 있다.

내 pc에서만 하다보면 내것에만 익숙해지므로 다른사람 pc에서 만든것도 보자

HTTP 요청/응답 구조

시작줄
헤더
본문

3단구성

모든데이터는 라인단위로 구분됨
캐리지 리턴 라인 피드라는 개행 문자가 들어감
개행 문자가 들어가면 다음 줄로 바뀜
줄단위로 의미를 가진 데이터가 쌓임.

Http 요청의 시작줄 구조는 어떻게 되어있는가?
1. 방식(method)
2.URL
3.protocol version HTTP / 1.0 1.2 등

시작줄 오고나면 다음은 헤더

헤더는 내가 어떤 놈이고 나는 어떤 것을 할 수 있고 내가 요청한 것을 처리하는데 필요한 정보를 제공
referer 헤더는 요청이 발생한 주소를 갖고 있다.(순차적인 요청이 이루어지고 있는지를 확인하는데 쓰임)
이런 것을 하지 않았을 때 발생하는 문제점이 CS(크로스사이트)취약점

요청헤더에 쿠키 가지고올라가는값
서버에서는 그 값을 가지고 동일한 값인지 인지하는데 사용함.

한줄 띄우고 요청 본문이 오는데 있을 수도있고 없을수도있음.(요청 방법에 따라서)
GET 방식이면 본문이 필요없음. POST는 요청처리에 필요한 것을 본문에 넣기 때문에 필요함.
DELETE는 본문이 필요없음(삭제하는 것이기 때문에). PUT은 자원의 내용을 본문에 넣어야하기 때문에 요청본문이 있음.

대표적인 자원요청방식 GET/POST

POST를 쓰면 두가지 헤더가 꼭 들어가야함.
Content-Type(여기 있는 내용이 어떤식으로 구성되어있고 인코딩 되어있는지를 나타냄)과 Content-Length(본문의 길이를 나타냄)
내가 파일을 업로드해서 보낼떄는 multipart/Formdata(비정형적 데이터를 업로드해서 전달하기 위해)가 content-type

multipart/Formdata;boundary=~~~~~~~~~~~~~~~(멀티파트폼데이터가 영역을 구분하는 방식)
헤더의 끝은 한줄 띄우는것.

그런데 이것을 안 보냄으로써 서버가 응답을 계속 기다리게 만듬.(Slowloris Attack)

RUDY Attack(HTTP POST Attack)이 있음.
요청에서 POST의 특징을 이용한 공격
Content-Length:10000을 적었는데 아래에 1개만 들어가면
아직 남아있다고 생각함. 천천히 천천히 1개씩 보내면 1만개가 다 올때까지 기다려야함.

RUDY = R-U-Dead-Yet
HTTP POST 요청 시 Content-Length를 크게 설정해서 전송하고 요청 본문의 실제 데이터를 일정한 시간 간격으로 한 문자씩 전송해서 서비스를 방해
서버는 한 세션 당 Content-Length * Interval Seconds 만큼의 시간 지연이 발생

응답의 시작줄은 
1.프로토콜
2.상태코드
3.상태코드에 대한 설명임.

100 정보성
200 성공
300 리다이렉트
400 클라이언트 오류
500 서버오류

헤더는 서버자신에 대한 설명
또는 클라이언트가 처리해야할 때 필요한 사항
HTTP는 stateless하기 때문에 동일한,비슷한 정보를 계속 주고받는다.(비효율적)

화면상에 나타나는 것은 요청 '응답 본문'이다.
응답 헤더와 응답 본문을 구분하는 개행문자를 포함한 응답값을 잘만하면 응답을 여러개로 분리시킬 수 있다.
분리된 응답 본문에 악성코드를 삽입해서 사용자 브라우저에 전달해서 사용할 수 있다.
이게 HTTP 응답 분할이다.

MySQL 사이트에 접속하면 jdbc driver odbc driver를 제공받을 수 있다.
driver loading 하고 연결하기 위해 URL(db주소와 db포트번호 접속하고자하는 곳),아이디,pw가 필요.
id,pw는 노출되면 안되기 때문에 암호화해서 별도의 공간에 저장
db쪽으로 db쪽에서 실행되는 명령인 statement를 전달
실행할 SQL(Structured Query Language)문을 작성한다.
Statement 객체를 통해서 SQL 문을 실행한다.
logic을 전개하는데 방해하는 요소들을 따로 만든다.
ibatis mybatis hybernate

일반적으로 statement는 3가지 형태를 갖고 있음
1. 그냥 statement : 그대로 갖다 실어나름. 내가 잘못만들면 잘못만든대로 전달. 내가 작성한대로 전달됨.
2. prepared statement : query의 구조를 정의하여(select * from users where id=? 와 같이) 외부에서 들어오는 정보(ex) 123)이 결합되어 전달된다.
그런데 id에 1=1과 같이 구조를 망가뜨리는 정보가 들어온다면, 오류를 발생시켜 구조가 유지될 수 있게 해줌.
3. callable statement : db에 있는 이미 만들어둔 기능을 호출함. stored procedure(어떤 기능을 내가 만들어서 넣어두는 것) ex)check user id같은 procedure를 만들면 값만 받아올 수 있음.

query가 변형된 것을 검증하지 않고 받았을 때 문제가 생기는 것 = sql injection
그냥 statement를 사용하면 sql injection 문제가 생김.

anti virus나 win10 pro이상에서는 host파일 변조를 계속 검사하거나 접근이 어려움.

local caching file.
우리들은행 ip를 우리은행ip로 호스트파일에서 변조해놓을 때 우리들 은행에 사용자가 접속해서 본인의 개인정보를 착각해서 기입하면 탈취한다. (호스트파일 변조를 통한 피싱 공격기법)

-----

10시~11시

proxy란 대리 수행해주는 것.
원래 client가 있을 때 server로 바로 가야하지만, 지나치게 비용과 시간이 소요되기 때문에 가운데 proxy가 도중에 저장된 정보를 반환해줌.(대리수행)
proxy의 모니터링기능과 caching기능을 이용하여 감시하고 비용과 시간을 절감해줄수있음.
진단하거나 공격할 때 proxy와 client를 한 pc에 설치하여 server쪽에 전달되는 데이터들과 받는 데이터들이 어떤 식으로 전달되는지를 분석해서
monitoring으로 내가 조작하여 전달해보는 것.
validation check.
vpn과 같이 우회목적으로 사용되기도 함.

Burp Suite 기본 설정으로 시작.
모니터링할 때 proxy에 들어오고 나가는 순간에 해당 대상을 잡는 것을 어떤것을 Tampering한다고 하고 어떤 놈은 Intercepter한다고 하고 어떤 놈은 Trap 건다고 함.
잡아서 데이터를 분석하고 변조한다.

Proxy->Intercept // Interceptis on /off가능
proxy를 거쳐서 왔다갔다한 것을 확인 가능.
Server나 Client가 끊지 않는 이상 계속 연결되어있고, 전이중 양방향 성격을 갖고 있음.(전화를 걸듯이)
HTTP는 단방향, Web Socket은 양방향.

1. Options에 들어가서 proxy Listeners에서 edit버튼을 눌러 8081로 포트번호를 변경한다.
2. proxy 서버를 구동시킨다(버퍼슈트같은 프로그램을 실행하고 감시할 포트를 지정해준다.)
proxy는 내 localhost에서 특정 포트가 열려있어야함.

윈도우 검색에서 프록시 서버구성이라고 치면 인터넷 연결 속성이 뜸.
여기서 LAN 설정을 누름.  여기서 127.0.0.1 포트번호 8081을 기입한다.
고급에 들어가면 예외가 있는데 <-loopback>을 기입한다.

그 이후 C:\SecureCoding\start_securecoding을 실행하여 이클립스에서 severs->tomcat->벌레모양 표시를 눌러서 서버구동한다.
intercept is off로 꼭 해준다.

서버는 8080, 프록시는 8081로 돌고있음.
http://loaclhost:8081로 http요청을 proxy에게 하면 아무 결과도 못받음. http요청은 서버에게 하는 것.
target port를 8081로 바꾸면 안됨.
<-loopback>을 쓰는 이유는 자기PC에서는 proxy를 거치지 않고 나갈 수 있게 해주는 것. proxy가 안떠있으면, proxy를 통해 가야하는데 갈곳이 없으므로 네트워크가 연결이 안되어있다고 나옴.

나는 WebGoat만 쳤는데 아래 History에 주르륵 다른 항목들이 생기는 이유는?
WebGoat
Request Raw를 읽어보고 Response Raw를 읽어본다.
302 Moved Temporarily -> web goat이라는 파일은 없고 directory있으므로 redirect해라.

WebGoat/
에서 response는 HTTP/1.1 401 Unauthorized이다. 인증되지 않았다. 인증정보 가져와라.

directory에 응답을 요청하면 서버는 어떻게 반응할까?
1) default page를 먼저 찾는다.

Eclipse에서 Ctrl+Shift+R를 누르면 나오는 창에 web.xml을 입력한다. 여기서 openeg에 있는 web.xml을 연다.
여기서 나오는 Welcome file lise가 Default page이다. 여기 나오는 Welcome list에 나오는 파일을 다 찾아보고 없으면 다음 단계로 넘어간다.

2)directory listing option을 찾는다.

directory listing이란 intitle indexof로 검색을 하면 해당하는 타이틀이 나오는 것을 검색해준다.
여기서 나오는 파일들은 왠만해서 노출되면 안되는 것들(내부구성들)이다.

ex) intitle indexof 이력서

directory listing은 반드시 비활성화 해둬야한다.(보안에 취약하므로)

3)못찾았다 를 return함

----

11시~12시

Authorization: Basic d2ViZ29hdDp3ZWJnb2F0 이것이 인증정보로 승인되어 200 OK가 나온다.

Basic realm="WebGoat Application"으로 입력창을 띄워준다.

이것이 HTTP Basic Authentication(기본 인증) 방식이다.
이 방법은 안전하지 않을 수 있다.

1) 인증정보 전달 문제
나온 인증정보 값 d2ViZ29hdDp3ZWJnb2F0을 BASE 64에 가서 decode하면webgoat:webgoat가 나옴.
인코딩 디코딩은 일정한 규칙에 따라서 대체 치환 전이 등의 방법으로 바꾸는 것이다.
통계 원리를 이용하여 알파벳을 추측할 수 있음.(확률적으로 접근)(대체,치환 함수)(암호문이 길수록 빨리 찾을 수 있음.)

BASE 64 는 64글자로 표현해야하는 것이므로 6비트가 필요함.(a-z,A-Z,0-9,=/ 글자수가 합치면 64개임)
64개 문자를 쓰는 이유는 바이너리 데이터를 시각화 하기 위해서이다.
바꾸고나면 유효성을 시각적으로 검증하는게 수월해진다.
프로토콜 자체가 바이너리를 허용하지 않는 프로토콜이 있다.
ex)메일을 전달할 때 처음에는 텍스트만 가는 줄 알았는데, 첨부파일을 넣어야하는 상황에서 이미지를 넣어야 하기 때문에 바이너리를 BASE64로 바꾸고 다시 받아서 바이너리로 바꿔서 사용할 수 있게 한다.

2) 세션을 유지하지 않는다.
세션을 유지하지 않는다는 것은 상태를 유지하지 않고 단발성이라는 것이다. 뒤에 발생하는 모든 요청에 인증정보가 들어가 있어야함.
보안에서 노출이 잦아지면 유출될 확률이 높아진다. 가급적이면 중요한 정보는 꼭 필요할 때 제한된 횟수로만 제공되는 것이 좋음.

세션을 유지하는 인증방식을 써라(Form base authentication)(id,pw넣고 버튼 누르는 방식)
서버쪽에서는 내용 검증을 하고 세션을 만들어서 해당 인물을 식별할 수 있는 세션아이디를 만들어서 할당한다.
다음에는 서버가 준 세션아이디로 요청하면 세션아이디로 식별한다.
이 구간만 잘 처리하면 인증정보의 유출을 막을 수 있음. 그 이후에는 세션아이디에 대한 보안이 필요하다.

----

13시~14시

설치가 안되면 intel virutual box at-x 설치하기
cmos 가서 intel virtualization technology disabled를 enabled로 바꿔주기

ubuntu에서 apache(webserver)+php(serverside script language)+mysql(db)을 구동하려고함

거의 모든 IT의 역사(정지훈 저)라는 책 읽어보기
거의 모든 인터넷의 역사 책 읽어보기

CMS(Content Management System)

3가지를 일일히 까는 것은 번거롭기 때문에 한번에 설치할 수 있도록 APM이라는 패키지가 존재.

su = super user라는 의미
ubuntu의 터미널 같은 창을 prompt라고한다.(메인프레임에 붙어서 작업할때)
sudo = super user do(슈퍼유저(root) 권한으로 실행하라)(명령어 단위)(계속 할때마다 sudo 치는것은 번거로움)

sudo passwd (패스워드 설정) 먼저 ubuntu계정의 비밀번호를 입력하고 root의 비밀번호를 설정해준다.
업데이트이후 암호를 치면 root로 접근할 수 있다.

$ sudo passwd($이므로 관리자권한이 아니라 유저 계정이라는 얘기)
# passwd(#이므로 앞이 root라는 얘기)

터미널을 하나 더 열면 두개는 다른 세션이다. 윈도우에서는 사용자 계정 컨트롤을 통해서 컨트롤한다

터미널에서 dpkg -l (찾고자하는것) 치면 설치되어있는지 여부를 확인할 수 있다.

# dpkg -l apahce2
# dpkg -l php7.0-common
# dpkg -l mysql-sever

apt-get -y install (설치하고자하는것) 치면 설치할 수 있다.
apt-get은 리눅스에서 패키지를 관리할 때 사용. 

# apt-get -y install lamp-server^

아파치 서비스 구동

systemctl restart apache2
systemctl enable apache2
systemctl status apache2

mysql 서비스 구동

root@ubuntu-VirtualBox:~# systemctl restart mysql
root@ubuntu-VirtualBox:~# systemctl enable mysql


default Ubuntu document root is /var/www/html
폴더로 이동 cd(chage directory)
ls (폴더 안에 뭐가 있는지 확인)
gedit index.html(열어볼수있음)

/var/www/html/index.html 을 구체적으로 입력하지 않아도
127.0.0.1만 쳐도 저 경로로 바로 이동.
즉, /var/www/html이 기준 디렉토리이다. 이것을 web root, 또는 web document root라고 부른다.
이것은 서버 설정에 정해져있다.

cd /etc/apach2/
ls
gedit apach2.conf

/var/www/html
<?php
phpinfo();
?> 저장

virtualbox 가서 추가버튼을 누르고 vbox로 백업해둔 ubuntu를 불러올 수 있다.

jsp는 <%=name%> 또는 <% %>로 필요한 자료들을 출력했다.(태그)
xe는 xpressEngine의 약자 제로보드의 후속작

XE를 이용한 웹 사이트 구축
https://myanjini.tistory.com/36

위의 과정 따라하기.

apt-get -y install php php-gd php-xml을 설치해줌.
www.xpressengine.com 접속하여
xpressengine core file을 최신버전으로 다운로드받는다.

cd ~ 하면 해당 계정의 홈디렉토리로 온다.

사용자 계정과 root 계정의 디렉토리 구분이 물리적으로 되어있지 않을까?
사용자 계정은 /home/(사용자계정)
root 계정은 /root

mysql> grant all privileges on xedb.* to xeuser@localhost identified by 'xeuser';
라고 입력
mysql> exit 입력

apt install net-tools 설치 후
/var/www/html경로에서 ifconfig 입력.
나오는 enp0s3쪽의 inet 값 10.0.2.15

내 pc를 host라 함.
host에서 가동되고 있는 vb/vm을 guest라고 한다.
기본적으로 virtual box는 NAT이다.
가상환경에서 존재하는 운영체제들은 각각 네트워크를 카드를 갖고 있는데
어떤 방식으로 연결되어있을까?
가장 좋은 방식은 독립적으로 기존pc처럼 네트워크에 연결되는 것이다.
독립적으로 붙기 위해서는 각각 네트워크에 대해 주소를 개별적으로 할당해줄 수 있어야함.
이것을 브릿지 모드라고 한다.
브릿지모드(bridge mode)로 붙는다는 것은 게스트머신에서 호스트머신과 동일한 레벨에서 네트워크에 연결되는 것(호스트와 관계없이 작동)
이런 브릿지 모드가 아니라 게스트가 호스트와 통신할 수 있는 것은 host only라고 한다.
그리고 다음으로 NAT 시키는 방법이 있다. 이것은 각각의 게스트 네트워크들이 바깥으로 나갈 수는 있지만, 호스트의 네트워크를 거쳐서 나가야하는 것을 의미한다.

pc호스트네트워크가 70.12.50.50일때 밖에서 70.12.50.50을 보고 들어왔지만, 안쪽 네트워크(10.0.2.15)로는 어떻게 갈수있을까?
그 때 사용하는 방법이 port fowarding이다. 내부적으로 하나의 ip를 가지고 여러개의 네트워크가 나눠쓰는 상황(NAT되었다.)으로 호스트 머신이 전환시켜주는 것이다.
각각 네트워크에 대해 호스트 머신이 port번호를 할당한다. 밖에서 안으로 들어갈때 대표 IP:포트번호로 식별되어 내부 네트워크로 들어갈 수 있는 상황이다.

port fowarding은 어디서 설정할까? virtual box에서 장치에서 네트워크->네트워크 설정에 간다.
네트워크 어댑터1 에서 NAT가 떠있는 창에서 포트포워딩을 누르고 Rule1을 추가하여 호스트IP와 임의의 호스트포트(ex:8888), 게스트IP와 게스트 포트 80번을 입력해주면 된다.

https://mrrootable.tistory.com에서 공부하기

NAT network와 NAT의 차이점은 가상환경 네트워크끼리 통신이 가능한가 불가능한가의 차이이다.
그래서 NAT는 port fowarding을 통해 호스트 ip를 경유하여 다른 내부 네트워크로 접근할 수 있다.

교육장은 pc마다 ip가 고정되어서 신규ip를 받을 수 없기 때문에 브릿지 모드가 불가능하다
DHCP (동적 아이피 관리 서버가 있음)

NAT, NAT network, Bridge mode, Internal Network, Host-Only Network

Internal Network는 외부로 나가지 못하고 내부 네트워크끼리만 통신 가능함. Host까지는 못감
Host-Only는 Host까지는 연결이 되지만 호스트 밖으로 연결되지 않음.

Generic Driver는 거의 사용되지 않는다.(UDP Tunnel networking, VDE(Virtual Distributed Ethernet)지원. 보통 NAT를 많이 씀.

브릿지모드가 가장 쉬움. NAT가 헷갈리는 편.

Node설치.

웹페이지에대한 호출과 응답이 어떻게 이루어지는지
node.js 설치
https://myanjini.tistory.com/39 참고해서 설치하기

가독성 좋은 폰트는 실력향상에 직결됨 콘솔라스 폰트
이클립스 ->windows ->preferences->textand fonts-> basic에있는 text fonts 를 consolas로 변경


windows에서도 node.js를 설치하여 실습할 수 있다. lts버전으로 설치한 이후

c:에 node-projects 폴더를 만든 후 이동

c:\node-projects

const http = require('http'); //import와 같은 기능
const port = 80; // 80포트를 사용하겠다.
const server = http.createServer((req, res) => {  //서버 정의 req와 res라는 변수를 받아들임. =>는 화살표 함수. function abc(i,j){ }...와 같은 함수역할.
		res.statusCode = 200; // 서버가 만들어지면 200코드를 내놓아라
		res.setHeader('Content-Type','text/plain'); //응답헤더
		res.end('Hello, node.js');//이건 응답 본문으로 들어간다.(hello, node.js 자리에 줄줄이 길게 쓰면 피곤하므로 템플릿을 활용한다.)
}); //웹서버는 요청이 들어오면 구동됨. 개발자 도구 f12->f5 들어가서 local host의 headers 가보면 기입한 내용 content-type과 text/plain을 볼 수 있다.

server.listen(port, (err) => {//네트워크 프로그램이므로 포트가 필요함.
	if (err) { console.log(err); } // 만약 오류가 발생하면 이걸 처리하라
	console.log('Server is running'); //오류가 발생하던 안하던 서버이즈러닝을 콘솔에 나오게함.
});

위의 코드가 들어간 이 파일을 파일 형식을 모든 파일형식, 인코딩을 UTF-8로 변경한 뒤 hello.js로 node-projects 폴더에 저장함.
cmd 에서 c:\node-projects>node hello.js 입력하면
Server is running이 뜸.
localhost 에 들어가면 Hello, node js문구가 나옴.