
. ./../bin/.a.sh .

점의 의미
1. 실행권한 없어도 강제로 실행
2. 현재 디텍터리
3. 상위 디텍터리
4. 숨김 파일
5. 확장자
6. 현재 디텍터리에 ~(명령어대로)하라


<이름 속성> 값
NTT Attribute value 라고 부름

<a href ="" onclick="">
a태그로 href 태그 , onclick 값을 줄 수 있음

태그를 다른말로 엘리먼트(element)라고 한다.

sss(Server side script)는 나온 결과를 body에 넣어주는 것이다.

[
	{
	},
	{
	}
]

이 형태가 제이슨 형태
apt-get -y install lamp-server^

으로 한방에 apm setup가능



도커 컨테이너 입문 책

도커는 업계 표준(De-facto Standards)이다.

여러가지 리눅스 어플리케이션을 묶어서 사용하고 싶지만, 꼬이는 문제를 해결하고 쉽게 사용하기 위해서 나옴.

개발,테스트,서비스 환경을 하나로 통일하여 효율적으로 관리할 수 있게 해줌.
컨테이너(이미지)를 전 세계 사람들과 공유할수 있음.
이것들은 리눅스 커널에서 제공하는 컨테이너 기술을 이용한다.

github와 비슷한 방식의 docker hub를 제공한다.

컨테이너는 가상화보다 가벼운 기술.
컴퓨터 안에서 컴퓨터를 만들어내기 위한 시도

pc성능이 좋아지며 서버 성능도 좋아졌는데
대부분의 시간 서버가 놀고 있는 문제가 발생
IT 기술이 보편화되면서 서비스도 많아졌음.
서버자체를 가상 머신에 집어넣어서 돌리자는 아이디어.

가상화 기술을 이용하여 서버를 임대해주는 서비스가 클라우드 서비스

가상 머신은 컴퓨터를 통째로 만들어내다 보니 각종 성능 손실이 발생한다.

가상화 프로그램을 사용하기 위해서는 CPU에서 제공하는 아래 기술들이 활성화되어 있어야 함
활성화 방법은 PC별로 상이하며 구글링을 통해서 확인

Intel (Intel 가상화 기술, Intel VT-x)
AMD (AMD 보안 가상 머신, AMD SVM)

반 가상화 기술이 등장
가상 머신은 완전한 컴퓨터다.(항상 게스트 OS를 설치해야 함)

이미지 안에 OS가 포함되기 때문에 이미지 용량이 커짐.
네트워크로 가상화 이미지를 주고 받는 건 꽤 부담스러움.

오픈소스 가상화 소프트웨어는 OS 가상화에만 주력.
배포와 관리 기능이 부족.

가상 머신의 성능 문제가 있다 보니 리눅스 컨테이너가 나옴.
컨테이너 안에 가상 공간을 만들지만 실행 파일을 호스트에서 직접 실행.

이것은 리눅스 커널의 cgroups와 namespaces가 제공하는 기술.

가상화가 아닌 격리.

도커의 특징.
서버 위에 호스트OS위에 도커엔진이 올라간다.
그 위에 실행 파일/라이브러리, 그 위에 각 어플리케이션이 운영됨.
이미지에 서버 운영을 위한 프로그램과 라이브러리만 격리해서 설치

이미지 용량이 크게 줄어들고 호스트와 OS자원(시스템 콜)을 공유

도커는 하드웨어 가상화 계층이 없음.
메모리 접근, 파일 시스템, 네트워크 전송 속도가 가상 머신에 비해 월등히 빠름.
호스트와 도커 컨테이너 사이의 성능 차이가 크지 않음(오차 범위 안)

호스트와 도커 컨테이너 사이에 CPU,메모리읽기쓰기,디스크I/O,네트워크 성능차이가 거의 없음.

도커는 이미지 생성과 배포에 특화되어 있음.

이미지 버전 관리도 제공하고 중앙 저장소에 이미지를 올리고 받을 수 있음.(올리는것Push/받는것pull)

github과 비슷한 형태로 도커 이미지를 공유하는 docker hub 제공(github처럼 유료 저장소도 제공)

이미지는 서비스 운영에 필요한 서버 프로그램, 소스 코드, 컴파일된 실행파일을 묶은 형태.(틀을 만들어 둔 것.)
저장소에 올리고 받는건 이미지임(push/pull)
컨테이너는 이미지를 실행한 상태임.
이미지로 여러개의 컨테이너를 만들 수 있음.

버저닝하고 내부적으로 유니온 파일 시스템 형식을 취함(aufs,btrfs,devicemapper)

도커는 베이스 이미지에서 '바뀐 부분만 이미지로 생성'
컨테이너로 실행할 때는 베이스 이미지와 바뀐 부분을 합쳐서 실행.

docker hub 및 개인 저장소에서 이미지를 공유할 때는 바뀐 부분만 주고 받음.

각 이미지는 의존 관계를 형성한다.

지금까지는 물리 서버를 직접 운영했음.

호스팅 또는 IDC 코로케이션 서비스 사용
직접 구입하고 설치하는데 문제가 생기고 가상화가 발전하면서 클라우드 환경으로 변화함.
가상 서버를 임대하여 사용한 만큼만 요금 지불
클릭 몇 번 만으로 가상 서버를 생성

자동으로 서버를 추가하고 삭제하기 까지

immutable infrastructure이라는 패러다임이 나옴

호스트OS와 서비스 운영환경(서버 프로그램, 소스코드, 컴파일된 바이너리)을 분리
한번 설정한 운영 환경은 변경하지않는다(immutable)는 개념
서비스 운영 환경을 이미지로 생성한 뒤 서버에 배포하여 실행

서비스가 업데이트되면 운영 환경 자체를 변경하지 않고, 이미지를 새로 생성하여 배포

MSA(micro service architecture)

클라우드 플랫폼에서 서버를 쓰고 버리는 것과 같이 immutable infrastructure도 서비스 운영 환경 이미지를 한번 쓰고 버림
도커는 부두 노동자를 뜻함.(컨테이너를 다루는 도커의 기능과 비슷함)

도커는 호스트 - 윈도우 위에 설치하거나
게스트 - 우분투 위에 설치할 수 있다.

10프로미만에서는 도커 툴박스를 깔아야만 지원한다.
윈도우에서 제공하는 가상화 솔루션이 활성화 되어있어야 한다.


Docker 설치
Docker 레포지토리 추가
root@server:~# gedit /etc/apt/sources.list
    
deb https://apt.dockerproject.org/repo ubuntu-xenial main

HTTP 통신에 사용되는 패키지 및 공개키 설치
root@server:/etc/apt# apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
root@server:~# apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D


linux-image extra 및 docker-engine 패키지 설치
root@server:~# apt-get install linux-image-extra-$(uname -r)
root@server:~# apt-get install docker-engine


도커 버전 확인 (동작 확인)
root@server:/etc/apt# docker version
Client:
 Version:      17.05.0-ce
 API version:  1.29
 Go version:   go1.7.5
 Git commit:   89658be
 Built:        Thu May  4 22:10:54 2017
 OS/Arch:      linux/amd64

Server:
 Version:      17.05.0-ce
 API version:  1.29 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   89658be
 Built:        Thu May  4 22:10:54 2017
 OS/Arch:      linux/amd64
 Experimental: false


컨테이너 실행
root@server:/etc/apt# docker container run ubuntu:latest /bin/echo 'Hello World'
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
6abc03819f3e: Pull complete 
05731e63f211: Pull complete 
0bd67c50d6be: Pull complete 
Digest: sha256:f08638ec7ddc90065187e7eabdfac3c96e5ff0f6b2f1762cf31a4f49b53000a5
Status: Downloaded newer image for ubuntu:latest
Hello World

# docker container run ubuntu:latest /bin/echo 'Hello World'
  ~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~
 컨테이너 생성 및 실행
 이미지 이름 및 태그
 컨테이너 실행 후 컨테이너 안에서 실행할 명령


도커 이미지 확인
root@server:/etc/apt# docker image ls
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
ubuntu              latest              7698f282e524        8 hours ago         69.9MB

nginx 웹 서버 구동
root@server:/etc/apt# docker container run --name webserver -d -p 80:80 nginx
root@server:/etc/apt# docker container run --name webserver2 -d -p 8080:80 nginx
945a160576030e5fa7511091f4b397588bcf4fb185648a242edf9c935e66f909

-d = 백그라운드에서 돌린다
-p = 포트
우분투와 달리 nginx의 태그는 없다 그러므로 최신 것을 받아온다.
container의 이름은 unique해야한다.(이름이 같으면 안됨.)
동작하는 것을 죽이고 다시 돌리기에는 번거로움. 이름은 개발하는 단계에서 사용함.

docker image ls를 쳐서 나오는 CONTAINER ID로 구동한다. 하지만, 그게 불편하기 때문에 alias(별칭)으로 webserver, webserver2를 사용한다.

automated는 dockerhub docker file로 automated build된 파일임을 표시하는 것으로 백도어나 악성코드를 방지할 수 있다.

docker container stop
docker image rm -f nginx
docker system prune -a
docker image pull nginx
root@server:~# mkdir docker
root@server:~# cd docker
root@server:~/docker# ls
root@server:~/docker# gedit main.go
root@server:~/docker# gedit Dockerfile

도커 이미지 빌드
docker image build -t 이미지명[:태그명] Dockerfile경로
-t : 이미지의 이름을 지정

-f : build를 할 때 기본적으로 Dockerfile을 이용하는데, 해당 파일이 아닌 다른 파일을 이용할 경우 "-f 파일명" 옵션을 설정
ex) MyDockerfile로 하고싶을 때 -f Mydockerfile을 따로 넣어줌

--pull=true/false : 매번 베이스 이미지를 강제로 내려받아서 사용.

FROM(베이스이미지가 될 이미지를 선택)


root@server:~/docker# docker image build -t example/echo:latest .  ? Dockerfile 경로에 유의
Sending build context to Docker daemon  3.072kB
Step 1/4 : FROM golang:1.9  ? 베이스 이미지를 가져옮
1.9: Pulling from library/golang
55cbf04beb70: Pull complete 
1607093a898c: Pull complete 
9a8ea045c926: Pull complete 
d4eee24d4dac: Pull complete 
9c35c9787a2f: Pull complete 
8b376bbb244f: Pull complete 
0d4eafcc732a: Pull complete 
186b06a99029: Pull complete 
Digest: sha256:8b5968585131604a92af02f5690713efadf029cc8dad53f79280b87a80eb1354
Status: Downloaded newer image for golang:1.9
 ---> ef89ef5c42a9
Step 2/4 : RUN mkdir /echo  ?  컨테이너에 /echo 디렉터리를 생성
 ---> Running in d4ed8c0274d4
 ---> b222ab609fef
Removing intermediate container d4ed8c0274d4
Step 3/4 : COPY main.go /echo  ? 호스트의 main.go 파일을 컨테이너의 /echo/main.go로 복사 
 ---> 2717792f856a
Removing intermediate container 81dd6a70ca10
Step 4/4 : CMD go run /echo/main.go ? 컨터이너에서 main.go를 실행
 ---> Running in 3d4999e8c7eb
 ---> 0b8f21dd9f05
Removing intermediate container 3d4999e8c7eb
Successfully built 0b8f21dd9f05
Successfully tagged example/echo:latest


main.go 소스코드

import (
		"fmt"
		"log"
		"net/http"
)

func_main() {
	http.HandleFunc("/", func(w http.ResponseWriter, r * http.Request) {
		log.Println("recived request")
		fmt.Fprintf(w, "Hello Docker!!!")
	})

	log.Println("start server")
	server := & http.Server {
		Addr : ":8080"
	}
	if err: = server.ListenAndServe(); err != nil {
		log.Println(err)
	}
}




오류 과정

main.go에 오류
docker file
docker build -> go 오류 뜸
docker container run 오류 뜸
main.go 수정
docker container run 오류 안뜸





도커 컨테이너를 실행
root@server:~/docker# docker container run -p 9000:8080 -d example/echo:latest
ef470b8faf6a0c5576fe8cffd90fc5399aadc31036cecf7777f7e558e3fc4570 ? 컨테이너 아이디
root@server:~/docker# curl http://localhost:9000

root@server:~/docker# docker container ls
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES
ef470b8faf6a        example/echo:latest   "go run /echo/main.go"   15 minutes ago      Up 15 minutes       0.0.0.0:9000->8080/tcp   eager_murdock
db3164ff2997        example/echo:latest   "go run /echo/main.go"   25 minutes ago      Up 25 minutes                                gracious_bell
root@server:~/docker# docker container ps
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                    NAMES
ef470b8faf6a        example/echo:latest   "go run /echo/main.go"   15 minutes ago      Up 15 minutes       0.0.0.0:9000->8080/tcp   eager_murdock
db3164ff2997        example/echo:latest   "go run /echo/main.go"   25 minutes ago      Up 25 minutes                                gracious_bell


앞쪽 포트 번호가 호스트 뒷쪽이 게스트이다.9000호스트 8080게스트

docker container stop $(docker container ls --filter "ancestor=example/echo" -q)

처럼 셸스크립트로 한번에 종료할 수 있다.

도커의 명령은 크게 2가지

이미지 관련된 것.(build, pull) 컨테이너(run, stop) 관련된 것.

이미지는 컨테이너를 만들기 위한 템플릿

docker image tag가 항상 latest로 유지되고있는데
항상 이렇게 유지하는 것보다 업데이트가 될 때마다 이전 버전을 1.0 2.0으로 백업해두고 업데이트하거나
이전버전을 태그이름 붙여놓고 업데이트할 때마다 태그이름을 붙이는 방식으로 구분해서 관리하는 것이 바람직하다.

docker image tag example/echo:latest example/echo:1.0 으로 가능하다.

