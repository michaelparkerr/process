코딩 열심히 하자
오픈소스는 다 열려있다.

세션1.
오픈소스와 API
프로그래밍은 필요해서 배워야할 뿐아니라 재미있다.
삶을 재미있게 꾸며가는데 필요한 요소이다.
아마존dash product

블록체인은 하나의 컴퓨터이자 시스템으로 보고
우리가 어떻게 활용할지가 더 중요.

협의를 위한 common ground가 없을 때 블록체인이 들어가기 좋은 장소

독특한 business가 아니면 중앙화된 DB보다 더 떨어짐.

2014부터 블록체인 시작.

누군가는 기술생산만 하고 누군가는 기술활용만 하면 됨.
활용사이드에 초점을 맞추자.

수레바퀴를 두 번 만들지 마라(모든 것을 바닥부터 만들지 않아도 된다.)
거인의 어깨 위에서 프로그래밍 시작하기(이미 만들어진 것을 잘 활용하면 된다.

API(Application Programming Interface, 응용 프로그램 프로그래밍 인터페이스)
운영체제와 응용프로그램을 연결해주는 수단
응용프로그램에서 사용할 수 있도록, 운영 체제나 프로그래밍 언어가 제공하는 기능을 제어할 수 있게 만든 인터페이스를 뜻한다.

API는 우편봉투같은 역할

프로그램할 수 있느냐가 정보접근의 차이, 제품 서비스 접근의 차이를 만들어냄.

스마트티비는 API가 제공됨.

배민이 보내는 사람, facebook이 받는 사람으로 확인되면 다시 facebook이 보내는 사람 배민이 받는 사람이 된다.

웹에서 API는 현대카드PRIVIA와 Facebook간의 API를 주고받고 서비스와 서비스 간의 대화 방식이다. 요청을 받는 측에서 일정한 방식을 명세하고 해당 방식대로 요청하면 정보를 제공한다.

아마존이 적자에서 흑자로 전환할 수 있었던 핵심적인 계기는 AWS이었다.

Rest API, Dev obs를 직접 활용하는 공부를 해볼 것.

프로젝트에 대해 미리 고민할 것.

유저가 사용하는 서비스를 만들 때 개발자가 뭘 해야하는지 알게 됨.

세션2.

깃헙은 곧 자소서
커밋,코드리뷰등 한것 매일 모두 기록되므로 자기가 배운걸 무조건 다 남기자.

베이그런트라는 경량화 가상화 툴로 사용할 예정.

<학습 공식>
공고-내가 가진것 = 내가 없는 것 = 학습해야할 것.

MOOC의 사례(Coursera,Edx-CS50,Udacity,K-MOOC) 꼭 활용해서 배우기
edx(동부대학,mit,harvard등)

coursera (비트코인 강의 추천, 프린스턴대학교의 Bitcoin and Cryptocurrency Technologies)
edx(introduction to computer science. cs50x강의 추천. blockchain 검색 UC berkely에 있는  blockchain technology와 blockchain fundamentals 강의 좋음)
인공지능추천강의(andrew ng교수님 강의 ,udacity(강사님이 가장 좋아하는 곳)(실리콘밸리기반의 기술의 끝)(coursera와 edx가 경쟁할 때 대학교가 포맷이어서는 안된다. 실용적이어야 하므로 나와서 만든 플랫폼)(youtube에 intoroduction to machine learning udacity 검색)

codecademy
code school
code avengers
team treehouse

프로젝트 사례
kaggle, 다양한 공모전 기회및 contest
내 주변 전공지식 활용 연구

세션3. 코더가 아닌 개발자 되기
github, 프로젝트, open source contribution

기술이 겁나 빨리 변한다. 그래서 어떻게 적응하느냐가 핵심.

트렌드에 민감해지기.

민감함!=감상함
민감함==학습함

학습 == 결과물 == 프로젝트 == Github
무조건 Github

개발자는 코드로 말한다.
짠 코드는 Github로 증명해야한다.

github에는 star가 있음.(인정받는 프로젝트 fame이 생김.)
오픈소스 컨트리뷰션
미니 프로젝트
불편한 것을 소프트웨어적으로 해결하기

MOOC활용.(udacity,edx,coursera,기타 코딩 플랫폼)

기본에 충실하기
언어는 기본. 자료구조+알고리즘=프로그래밍,컴퓨터 자체에 대한 이해(아키텍처,OS), Domain Knowledge(시스템, 네트워크, 등등)
코딩테스트는 넘어갈 수 있는 정도의 소양은 쌓아두기.
책보고 하기보다는 dip을 내려가서 정리하고 관련된 파트를 세부 공부

programmers.co.kr ( 코딩테스트 연습하기에 괜찮은 곳)
https://www.acmicpc.net/
https://www.hackerrank.com/(정말 좋음)
https://codingcompetitions.withgoogle.com/kickstart

정복해야할 소프트웨어는 설치하고보는게 답
https://gitforwindows.org/ 다운로드

스터디를 짜게될텐데 같이 진행하면 좋음
.md 는 markdownlanguage의 축약어로 포맷이 갖춰진 파일을 간단히 만들 수 있음.

마크다운에디터 중 추천하는 것은
typora

https://typora.io/

마크다운 문법 배우기
https://gist.github.com/ihoneymon/652be052a0727ad59601


```(백틱 3개) 넣으면 어떤 언어 사용하는지 나오는데 기입하면 코드 syntax highlighting된다.

git bash에 가서 ~/Desktop  ls하면 아까 만든 파일이 있을 것.

mkdir test
cd test/
mv ../ github.md .
ls
git init //깃을 쓸때 시작할 때 사용
git add github.md
git commit -m "first commit"
git config 로 초기 설정을 잡는다.

stateofdapps에서 순위를 볼 수 있음.
비탈릭은 확장성은 제한되더라도 생태계를 중심으로 모이길 원함.

개념에 휘둘리지 말고 내가 뭘 만들 수 있는 개발자인지가 핵심.
내가 기술을 가지고 운영할 수 있다는것이 가장 도움이 됨.